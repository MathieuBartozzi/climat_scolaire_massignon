from utils.utils import authenticate,plot_heatmap_ecarts_genre,load_data,plot_scores_by_gender, plot_scores_by_level_and_gender,compute_composite_scores,plot_combined_relation,plot_score_distributions_subplots, COLOR_PALETTE, plot_correlation_heatmap
import streamlit as st
import json

nom = authenticate()

# ‚úÖ Affichage unique du message de bienvenue
if st.session_state.get("show_welcome", False):
    st.success(f"Bienvenue {nom} üëã")
    st.info("üëâ Pense √† ouvrir le menu lat√©ral √† gauche pour explorer les pages de l'application.")
    st.session_state["show_welcome"] = False  # Ne plus l'afficher ensuite


df=load_data("data/df_processed.csv")
df_scores=load_data("data/df_scores.csv")


with open("utils/scores_axes.json", "r", encoding="utf-8") as f:
    score_axes = json.load(f)


# Tabs
tab1, tab2, tab3 = st.tabs([
    "**QUESTIONS FERM√âES**",
    "**SCORES COMPOSITES**",
    "**CORR√âLATIONS**"
])

# Onglet 1 ‚Äî Questions ferm√©es (√©carts par genre et par niveau)
with tab1:

    st.subheader("R√©sultats des questions ferm√©es")

    st.markdown("Pour chaque question ferm√©e, quatre niveaux de r√©ponses ont √©t√© propos√©s aux √©l√®ves: ¬´ Pas du tout d‚Äôaccord ¬ª, ¬´ Plut√¥t pas d‚Äôaccord ¬ª, ¬´ Plut√¥t d‚Äôaccord ¬ª et ¬´ Tout √† fait d‚Äôaccord ¬ª. Ces r√©ponses ont √©t√© cod√©es de 0 √† 3 qui permettent de calculer un score moyen par question. Un score √©lev√© indique une perception positive, tandis qu‚Äôun score faible indique une perception n√©gative.")

    with st.expander("Liste des questions ferm√©es"):
            st.markdown("""
            | Code | Question                                                                                   |
            |------|--------------------------------------------------------------------------------------------|
            | Q3   | Comment te sens-tu globalement dans ton √©tablissement ?                                   |
            | Q4   | As-tu confiance dans les d√©cisions prises par les adultes ?                               |
            | Q6   | Te sens-tu en s√©curit√© dans l‚Äô√©tablissement ?                                              |
            | Q7   | As-tu d√©j√† particip√© √† des projets ou activit√©s dans l‚Äô√©tablissement ?                    |
            | Q9   | Peux-tu t‚Äôexprimer librement dans l‚Äô√©tablissement ?                                       |
            | Q10  | Te sens-tu √©cout√©(e) et soutenu(e) ?                                                       |
            | Q12  | As-tu envie de venir chaque jour √† l‚Äô√©tablissement ?                                      |
            | Q13  | Comment qualifierais-tu la relation entre ta famille et l‚Äô√©tablissement ?                 |
            """)

    # Initialisation de la valeur par d√©faut
    if "vue_scores" not in st.session_state:
        st.session_state.vue_scores = "vue globale par genre"

    # S√©lecteur de vue avec st.pills
    vue = st.pills(
        label="",
        options=["vue globale par genre", "vue crois√©e par niveau et genre"],
        key="vue_scores")

    # Affichage conditionnel
    with st.container(border=True):
        if vue == "vue globale par genre":
            plot_scores_by_gender(df)
        else:
            plot_scores_by_level_and_gender(df)



    # üß† Lecture automatique des extr√™mes
    score_columns = [
        "sentiment_global", "confiance_adultes", "sentiment_securite",
        "participation_projets", "liberte_expression", "ecoute_et_soutien",
        "envie_venir", "relation_famille_etab"
    ]

    labels = {
        "sentiment_global": "Q3 ‚Äì Sentiment global",
        "confiance_adultes": "Q4 ‚Äì Confiance envers les adultes",
        "sentiment_securite": "Q6 ‚Äì Sentiment de s√©curit√©",
        "participation_projets": "Q7 ‚Äì Participation aux projets",
        "liberte_expression": "Q9 ‚Äì Libert√© d'expression",
        "ecoute_et_soutien": "Q10 ‚Äì √âcoute et soutien",
        "envie_venir": "Q12 ‚Äì Envie de venir √† l‚Äô√©tablissement",
        "relation_famille_etab": "Q13 ‚Äì Relation famille-√©tablissement"
    }

    moyennes = df[score_columns].mean().sort_values()
    plus_bas = labels[moyennes.idxmin()]
    plus_haut = labels[moyennes.idxmax()]
    ecart = round(moyennes.max() - moyennes.min(), 2)


    st.info(f""" **√Ä retenir** :
    - üìâ Score moyen le plus faible : **{plus_bas}**
    - üìà Score moyen le plus √©lev√© : **{plus_haut}**

    """,icon="‚ÑπÔ∏è")



    st.divider()

    st.subheader("√âcarts moyens par genre et par niveau")

    st.markdown("""
    Dans ce diagramme, chaque case indique l‚Äô**√©cart moyen Fille ‚Äì Gar√ßon** pour une question et un niveau :
    - Un **√©cart positif** signifie que les filles ont un **score moyen plus √©lev√©** que les gar√ßons.
    - Un **√©cart n√©gatif** indique que les gar√ßons ont un **score plus √©lev√©** que les filles.
    """)

    with st.container(border=True):
        plot_heatmap_ecarts_genre(df)

    st.info("""**√Ä retenir :**

- Les plus forts √©carts en faveur des filles apparaissent en **4e** sur :
  - la participation aux projets (**+0.75**),
  - la confiance dans les d√©cisions des adultes** (**+0.38**),
  - l‚Äô√©coute et le soutien** (**+0.31**).

- En **5e**, les filles d√©clarent aussi des scores sensiblement plus √©lev√©s sur tous les axes (√©carts de **+0.19 √† +0.32**).

- En revanche, les √©carts sont faibles voire invers√©s en 3e, o√π les gar√ßons et les filles r√©pondent de mani√®re plus homog√®ne (valeurs proches de 0, parfois n√©gatives).

- Globalement, les **4e filles** ressortent comme le groupe le plus positivement engag√©, notamment dans la dynamique participative.

""", icon="‚ÑπÔ∏è")

# Onglet 2 ‚Äî Scores composites par axe
with tab2:
    st.subheader("Scroring par axe th√©matique")

    st.markdown("""
                Pour faciliter la lecture des r√©sultats, certaines questions ferm√©es ont √©t√© regroup√©es en **axes th√©matiques**.
                Chaque axe correspond √† une **moyenne de plusieurs questions** portant sur une m√™me dimension du climat scolaire.
                Voici les 4 axes utilis√©s :
        - **Bien-√™tre** ‚Üí sentiment global, s√©curit√©, envie de venir
        - **Confiance** ‚Üí d√©cisions des adultes, relation famille-√©tablissement
        - **Expression / √©coute** ‚Üí libert√© d'expression, √©coute et soutien
        - **Engagement** ‚Üí participation aux projets ou activit√©s
                """)




    with open("utils/scores_axes.json", "r", encoding="utf-8") as f:
        score_axes = json.load(f)


    df_composite = compute_composite_scores(df, score_axes, context_cols=["genre"])

    with st.container(border=True):
        plot_score_distributions_subplots(
            df_composite,
            list(score_axes.keys()),
            rows=2,
            cols=2,
            palette=COLOR_PALETTE
        )



    def summarize_extremes(df, composite_columns, labels, top_n=3):
        lignes = []

        resultats = []
        for axe in composite_columns:
            for (niveau, genre), group in df.groupby(["niveau", "genre"]):
                if group[axe].notna().sum() == 0:
                    continue
                moyenne = group[axe].mean()
                resultats.append({
                    "score": axe,
                    "niveau": niveau,
                    "genre": genre,
                    "moyenne": moyenne
                })

        # Tri par moyenne
        sorted_results = sorted(resultats, key=lambda x: x["moyenne"])
        plus_faibles = sorted_results[:top_n]
        plus_forts = sorted_results[-top_n:][::-1]  # ordre d√©croissant

        lignes.append("**üìâ Les 3 scores moyens les plus faibles sont :**")
        for r in plus_faibles:
            lignes.append(f"- {labels[r['score']]} en {r['niveau']} pour les {r['genre'].lower()}s : {r['moyenne']:.2f}/5")

        lignes.append("\n**üìà Les 3 scores moyens les plus √©lev√©s sont :**")
        for r in plus_forts:
            lignes.append(f"- {labels[r['score']]} en {r['niveau']} pour les {r['genre'].lower()}s : {r['moyenne']:.2f}/5")

        st.info("**√Ä retenir :**\n\n" + "\n".join(lignes), icon="‚ÑπÔ∏è")

    score_composite_cols = ["bien_etre", "climat_de_confiance", "expression_et_ecoute", "engagement"]
    labels = {
        "bien_etre": "Bien-√™tre",
        "climat_de_confiance": "Confiance",
        "expression_et_ecoute": "Expression / √©coute",
        "engagement": "Engagement"
    }

    summarize_extremes(df_scores, score_composite_cols, labels)








# Onglet 3 ‚Äî Corr√©lations entre axes
with tab3:
    # üëâ Recalcul des scores composites (une seule fois)
    score_mapping = {
        "Bien-√™tre": ["sentiment_global", "sentiment_securite", "envie_venir"],
        "Confiance": ["confiance_adultes", "relation_famille_etab"],
        "Expression / √©coute": ["liberte_expression", "ecoute_et_soutien"],
        "Engagement": ["participation_projets"]
    }
    df_composite = compute_composite_scores(df, score_mapping, context_cols=[])

    # üî¢ Heatmap de corr√©lation
    st.markdown("### Matrice de corr√©lation")
    st.markdown("""
Ce tableau crois√© indique le **degr√© de corr√©lation lin√©aire** entre chaque paire d‚Äôaxes th√©matiques :

- **+1** : forte corr√©lation positive (les scores √©voluent ensemble)
- **‚àí1** : forte corr√©lation n√©gative (les scores √©voluent en sens inverse)
- **0** : absence de lien lin√©aire

> Ce graphique permet de rep√©rer rapidement les **liens forts ou faibles entre les grandes dimensions du climat scolaire**.
    """)


    score_cols = list(score_mapping.keys())
    with st.container(border=True):
        plot_correlation_heatmap(df_composite, score_cols)


    st.info("""**√Ä retenir** :

- Corr√©lation forte entre **Bien-√™tre** et **Confiance** (**0.60**) : les √©l√®ves qui se sentent bien dans l‚Äô√©tablissement ont aussi tendance √† faire confiance aux adultes.
- Corr√©lation mod√©r√©e entre **Bien-√™tre** et **Expression / √©coute** (**0.53**), et entre **Confiance** et **Expression / √©coute** (**0.53**) : le sentiment d‚Äô√©coute favorise le bien-√™tre et la confiance.
- üö´ Faibles corr√©lations de l‚Äô**Engagement** avec les autres axes (**‚â§ 0.10**) : ce score semble capter une dimension √† part, moins li√©e au climat relationnel.

""", icon="‚ÑπÔ∏è")


    st.markdown("---")


    # üîÅ Nuage de points entre deux axes
    st.markdown("### Corr√©lation entre deux axes choisis")
    st.markdown("""
Ces graphiques permetent d‚Äôexplorer la **distribution crois√©e des scores** entre deux dimensions du climat scolaire.

- La **bo√Æte √† moustaches** √† gauche indique comment les scores du second axe varient selon le niveau atteint sur le premier axe.
- La **heatmap** √† droite montre combien d‚Äô√©l√®ves partagent une m√™me combinaison de scores sur ces deux axes.

    """)

    col1, col2 = st.columns(2)
    x_axis = col1.selectbox("Axe horizontal (X)", score_cols, index=0)
    y_axis = col2.selectbox("Axe vertical (Y)", score_cols, index=1)

    if x_axis == y_axis:
        st.warning("üìå Choisissez deux axes diff√©rents pour afficher une corr√©lation.")
    else:
        plot_combined_relation(df_composite, x_axis, y_axis)
